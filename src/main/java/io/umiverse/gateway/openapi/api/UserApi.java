/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.umiverse.gateway.openapi.api;

import io.umiverse.gateway.openapi.model.User;
import io.umiverse.gateway.openapi.model.UserEditRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-03T15:10:02.892036+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "user", description = "user apis")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user/info : Get user detail by user.
     * This api returns current user info.
     *
     * @return Get user info detail success. (status code 200)
     *         or  (status code 401)
     */
    @Operation(
        operationId = "userInfoGet",
        summary = "Get user detail by user.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get user info detail success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/info",
        produces = { "application/json" }
    )
    default ResponseEntity<User> userInfoGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emailVerified\" : 6, \"subscriber\" : \"subscriber\", \"registerTime\" : 1, \"id\" : 0, \"userName\" : \"userName\", \"locale\" : \"locale\", \"email\" : \"email\", \"picture\" : \"picture\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/info : Change user info.
     * User can use this api to change info by themself.
     *
     * @param userEditRequest  (optional)
     * @return Change user info detail success, return changed user info. (status code 200)
     *         or change user profile fail(username null or duplicate) (status code 400)
     *         or  (status code 401)
     */
    @Operation(
        operationId = "userInfoPost",
        summary = "Change user info.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Change user info detail success, return changed user info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "change user profile fail(username null or duplicate)"),
            @ApiResponse(responseCode = "401", description = "")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/info",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> userInfoPost(
        @Parameter(name = "UserEditRequest", description = "") @Valid @RequestBody(required = false) UserEditRequest userEditRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emailVerified\" : 6, \"subscriber\" : \"subscriber\", \"registerTime\" : 1, \"id\" : 0, \"userName\" : \"userName\", \"locale\" : \"locale\", \"email\" : \"email\", \"picture\" : \"picture\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
