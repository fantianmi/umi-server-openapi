/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.umiverse.gateway.openapi.api;

import io.umiverse.gateway.openapi.model.AskAcceptRequest;
import io.umiverse.gateway.openapi.model.AskSaveRequest;
import io.umiverse.gateway.openapi.model.Bid;
import io.umiverse.gateway.openapi.model.BidAcceptRequest;
import io.umiverse.gateway.openapi.model.BidSaveRequest;
import io.umiverse.gateway.openapi.model.Deal;
import io.umiverse.gateway.openapi.model.NftItem;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-03T15:10:02.892036+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "marketplace", description = "marketplace api")
public interface MarketplaceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /marketplace/ask/accept : 接受NFT卖单价格并成交
     *
     * @param askAcceptRequest  (optional)
     * @return 成交成功 (status code 200)
     *         or 成交失败，参数错误 (status code 403)
     */
    @Operation(
        operationId = "marketplaceAskAcceptPost",
        summary = "接受NFT卖单价格并成交",
        tags = { "marketplace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成交成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Deal.class))
            }),
            @ApiResponse(responseCode = "403", description = "成交失败，参数错误")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/marketplace/ask/accept",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Deal> marketplaceAskAcceptPost(
        @Parameter(name = "AskAcceptRequest", description = "") @Valid @RequestBody(required = false) AskAcceptRequest askAcceptRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"seller\" : \"seller\", \"tokenId\" : 6, \"price\" : 1.4658129, \"dealTimestamp\" : 5, \"id\" : 0, \"txHash\" : \"txHash\", \"buyer\" : \"buyer\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /marketplace/ask/save : NFT出价卖
     *
     * @param askSaveRequest  (optional)
     * @return 出价成功. (status code 200)
     *         or 出价失败，参数错误 (status code 403)
     */
    @Operation(
        operationId = "marketplaceAskSavePost",
        summary = "NFT出价卖",
        tags = { "marketplace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "出价成功.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NftItem.class))
            }),
            @ApiResponse(responseCode = "403", description = "出价失败，参数错误")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/marketplace/ask/save",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<NftItem> marketplaceAskSavePost(
        @Parameter(name = "AskSaveRequest", description = "") @Valid @RequestBody(required = false) AskSaveRequest askSaveRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gameId\" : 6, \"priceChange\" : 7.0614014, \"owner\" : \"owner\", \"image\" : \"image\", \"externalUrl\" : \"externalUrl\", \"itemType\" : \"itemType\", \"gasFee\" : 2.302136, \"tokenId\" : 1, \"description\" : \"description\", \"lockState\" : \"lockState\", \"tradeState\" : 9, \"suggestedPrice\" : 5.962134, \"animationUrl\" : \"animationUrl\", \"price\" : 5.637377, \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /marketplace/bid/accept : 接受NFT买单价格并成交
     *
     * @param bidAcceptRequest  (optional)
     * @return 成交成功 (status code 200)
     *         or 成交失败，参数错误 (status code 403)
     */
    @Operation(
        operationId = "marketplaceBidAcceptPost",
        summary = "接受NFT买单价格并成交",
        tags = { "marketplace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成交成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Deal.class))
            }),
            @ApiResponse(responseCode = "403", description = "成交失败，参数错误")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/marketplace/bid/accept",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Deal> marketplaceBidAcceptPost(
        @Parameter(name = "BidAcceptRequest", description = "") @Valid @RequestBody(required = false) BidAcceptRequest bidAcceptRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"seller\" : \"seller\", \"tokenId\" : 6, \"price\" : 1.4658129, \"dealTimestamp\" : 5, \"id\" : 0, \"txHash\" : \"txHash\", \"buyer\" : \"buyer\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /marketplace/bid/save : NFT出价买
     *
     * @param bidSaveRequest  (optional)
     * @return 出价买成功 (status code 200)
     *         or 出价买失败，参数错误 (status code 403)
     */
    @Operation(
        operationId = "marketplaceBidSavePost",
        summary = "NFT出价买",
        tags = { "marketplace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "出价买成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bid.class))
            }),
            @ApiResponse(responseCode = "403", description = "出价买失败，参数错误")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/marketplace/bid/save",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Bid> marketplaceBidSavePost(
        @Parameter(name = "BidSaveRequest", description = "") @Valid @RequestBody(required = false) BidSaveRequest bidSaveRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"seller\" : \"seller\", \"expireTimestamp\" : 5, \"price\" : 1.4658129, \"nftId\" : 6, \"id\" : 0, \"createTimestamp\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /marketplace/{gameId}/items : Get NFT items by gameId from server
     *
     * @param gameId the request game ID to search. (required)
     * @return Get nft item list success. (status code 200)
     */
    @Operation(
        operationId = "marketplaceGameIdItemsGet",
        summary = "Get NFT items by gameId from server",
        tags = { "marketplace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get nft item list success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NftItem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/marketplace/{gameId}/items",
        produces = { "application/json" }
    )
    default ResponseEntity<List<NftItem>> marketplaceGameIdItemsGet(
        @Parameter(name = "gameId", description = "the request game ID to search.", required = true) @PathVariable("gameId") Long gameId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gameId\" : 6, \"priceChange\" : 7.0614014, \"owner\" : \"owner\", \"image\" : \"image\", \"externalUrl\" : \"externalUrl\", \"itemType\" : \"itemType\", \"gasFee\" : 2.302136, \"tokenId\" : 1, \"description\" : \"description\", \"lockState\" : \"lockState\", \"tradeState\" : 9, \"suggestedPrice\" : 5.962134, \"animationUrl\" : \"animationUrl\", \"price\" : 5.637377, \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /marketplace/{tokenId}/deals : Get NFT item deals by tokenId from server
     *
     * @param tokenId the request tokenId. (required)
     * @return Get deals success. (status code 200)
     */
    @Operation(
        operationId = "marketplaceTokenIdDealsGet",
        summary = "Get NFT item deals by tokenId from server",
        tags = { "marketplace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get deals success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Deal.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/marketplace/{tokenId}/deals",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Deal>> marketplaceTokenIdDealsGet(
        @Parameter(name = "tokenId", description = "the request tokenId.", required = true) @PathVariable("tokenId") Long tokenId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"seller\" : \"seller\", \"tokenId\" : 6, \"price\" : 1.4658129, \"dealTimestamp\" : 5, \"id\" : 0, \"txHash\" : \"txHash\", \"buyer\" : \"buyer\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
