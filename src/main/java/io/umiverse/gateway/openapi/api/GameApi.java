/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.umiverse.gateway.openapi.api;

import io.umiverse.gateway.openapi.model.Game;
import io.umiverse.gateway.openapi.model.GameItem;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-03T15:10:02.892036+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "game", description = "game apis")
public interface GameApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /game/{gameId} : Get game detail from server
     *
     * @param gameId the request game ID to search. (required)
     * @return Get game info success. (status code 200)
     */
    @Operation(
        operationId = "gameGameIdGet",
        summary = "Get game detail from server",
        tags = { "game" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get game info success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Game.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/game/{gameId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Game> gameGameIdGet(
        @Parameter(name = "gameId", description = "the request game ID to search.", required = true) @PathVariable("gameId") Long gameId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"coverImageUrl\" : \"coverImageUrl\", \"line\" : \"line\", \"nid\" : \"nid\", \"description\" : \"description\", \"orderWeight\" : 5, \"screenshot\" : \"screenshot\", \"secret\" : \"secret\", \"createTimestamp\" : 5, \"faviconUrl\" : \"faviconUrl\", \"twitter\" : \"twitter\", \"gameServerUrl\" : \"gameServerUrl\", \"company\" : \"company\", \"callbackUrl\" : \"callbackUrl\", \"id\" : 0, \"iconUrl\" : \"iconUrl\", \"state\" : 6, \"introduction\" : \"introduction\", \"email\" : \"email\", \"highlightType\" : 1, \"cdnUrl\" : \"cdnUrl\", \"facebook\" : \"facebook\", \"name\" : \"name\", \"shortName\" : \"shortName\", \"category\" : \"category\", \"slogan\" : \"slogan\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /game/{gameId}/items : Get game items by gameId from server
     *
     * @param gameId the request game ID to search. (required)
     * @return Get game item list success. (status code 200)
     */
    @Operation(
        operationId = "gameGameIdItemsGet",
        summary = "Get game items by gameId from server",
        tags = { "game" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get game item list success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GameItem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/game/{gameId}/items",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GameItem>> gameGameIdItemsGet(
        @Parameter(name = "gameId", description = "the request game ID to search.", required = true) @PathVariable("gameId") Long gameId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gameId\" : 6, \"price\" : 1, \"pictureUrl\" : \"pictureUrl\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /game/list : Get all game list.
     * This api returns all games as list.
     *
     * @param order GameList order, ALL or NEW, default is ALL (optional)
     * @param category Choose game by category (optional)
     * @return Get game list success. (status code 200)
     */
    @Operation(
        operationId = "gameListGet",
        summary = "Get all game list.",
        tags = { "game" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get game list success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Game.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/game/list",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Game>> gameListGet(
        @Parameter(name = "order", description = "GameList order, ALL or NEW, default is ALL") @Valid @RequestParam(value = "order", required = false) String order,
        @Parameter(name = "category", description = "Choose game by category") @Valid @RequestParam(value = "category", required = false) String category
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"coverImageUrl\" : \"coverImageUrl\", \"line\" : \"line\", \"nid\" : \"nid\", \"description\" : \"description\", \"orderWeight\" : 5, \"screenshot\" : \"screenshot\", \"secret\" : \"secret\", \"createTimestamp\" : 5, \"faviconUrl\" : \"faviconUrl\", \"twitter\" : \"twitter\", \"gameServerUrl\" : \"gameServerUrl\", \"company\" : \"company\", \"callbackUrl\" : \"callbackUrl\", \"id\" : 0, \"iconUrl\" : \"iconUrl\", \"state\" : 6, \"introduction\" : \"introduction\", \"email\" : \"email\", \"highlightType\" : 1, \"cdnUrl\" : \"cdnUrl\", \"facebook\" : \"facebook\", \"name\" : \"name\", \"shortName\" : \"shortName\", \"category\" : \"category\", \"slogan\" : \"slogan\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
